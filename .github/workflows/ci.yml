on:
  push:
    branches:
      - main

permissions:
  issues: write

jobs:
#  Build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v5
#
#      - name: Maven Build
#        run: mvn install -DskipTests
#
#      - name: Upload artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: products_app_artifact
#          path: target/*.jar
#
#  Test:
#    runs-on: ubuntu-latest
#    needs: Build
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v5
#
#      - name: Maven Test
#        run: mvn tes
#
#  Scan:
#    runs-on: ubuntu-latest
#    needs: Build
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v5
#
#      - name: Test checkstyle
#        run: mvn test checkstyle:checkstyle

#  Foo:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v5
#
#      - name: Create Foo dir
#        run: mkdir Foo

  test_permissions_issues:
    runs-on: ubuntu-latest
    steps:
      - name: List issues
        run: |
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             https://api.github.com/repos/${{ github.repository }}/issues

      - name: Create issue
        run: |
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"title":"Test issue"}' \
              https://api.github.com/repos/${{ github.repository }}/issues

  test_permissions_code:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Create file.txt
        run: echo "test permission" > file.txt

      - name: Push file.txt
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add file.txt
          git commit -m "file hello.txt"
          git push

#  Post-check:
#    if: always()
#    runs-on: ubuntu-latest
#    needs: [Build, Test, Scan]
#    steps:
#      - name: Summarize Results
#        run: |
#          echo "Build result: ${{ needs.Build.result }}"
#          echo "Test result: ${{ needs.Test.result }}"
#          echo "Scan result: ${{ needs.Scan.result }}"
#
#      - name: Failure notif
#        if: |
#          needs.Build.result == 'failure' ||
#          needs.Test.result == 'failure' ||
#          needs.Scan.result == 'failure'
#        run: |
#          echo "‚ùå failed!"

