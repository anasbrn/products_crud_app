on:
  push:
    branches:
      - main
env:
  ECR_REPOSITORY: "products-app-img"
jobs:
#  Build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v5
#
#      - name: Maven Build
#        run: mvn install -DskipTests
#
#      - name: Upload artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: products_app_artifact
#          path: target/*.jar
#
#  Test:
#    runs-on: ubuntu-latest
#    needs: Build
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v5
#
#      - name: Maven Test
#        run: mvn test
#
#  Scan:
#    runs-on: ubuntu-latest
#    needs: Build
#    steps:
#      - name: Code checkout
#        uses: actions/checkout@v5
#
#      - name: Test checkstyle
#        run: mvn test checkstyle:checkstyle
  BUILD_PUSH_DOKCER:
    runs-on: ubuntu-latest
    environment: production
    #    needs: [ Build, Test, Scan ]
    steps:
      - name: checkout
        uses: actions/checkout@v5

      - name: login to ECR
        id: ecr
        uses: elgohr/ecr-login-action@v3
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ vars.AWS_REGION }}

      - name: Build & push image docker
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#  BUILD_PUSH_DOKCER:
#    runs-on: ubuntu-latest
#    environment: Production
#    #    needs: [Build, Test, Scan]
#    steps:
#      - name: checkout
#        uses: actions/checkout@v5
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id:  ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ vars.AWS_REGION }}
#
#      - name: Login to Amazon ECR
#        id: ecr-login
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: Build & push image docker
#        env:
#          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
#          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
#

  Post-check:
    if: always()
    runs-on: ubuntu-latest
#    needs: [Build, Test, Scan, BUILD_PUSH_DOKCER]
    needs: [BUILD_PUSH_DOKCER]
    steps:
      - name: Summarize Results
        run: |
          echo "Build result: ${{ needs.Build.result }}"
          echo "Test result: ${{ needs.Test.result }}"
          echo "Scan result: ${{ needs.Scan.result }}"
          echo "BUILD_PUSH_DOKCER result: ${{ needs.BUILD_PUSH_DOKCER.result }}"

      - name: Failure notif
        if: |
          needs.Build.result == 'failure' ||
          needs.Test.result == 'failure' ||
          needs.Scan.result == 'failure' ||
          needs.BUILD_PUSH_DOKCER.result == 'failure'
        run: |
          echo "‚ùå failed!"

